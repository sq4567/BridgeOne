---
title: "TinyUSB 전력 관리 규칙"
description: "ESP-IDF 환경에서 TinyUSB의 저전력 모드(Light-sleep) 통합, USB 이벤트 후크, 연결 상태 관리 API 사용법을 정의합니다."
tags: ["tinyusb", "esp-idf", "power-management", "freertos", "sleep", "hook"]
version: "v1.0"
owner: "Chatterbones"
updated: "2025-01-27"
framework: "ESP-IDF + TinyUSB"
references: ["Context7:/hathach/tinyusb", "Context7:/espressif/esp-idf", "mdc:./tinyusb-freertos-integration.mdc"]
---

# TinyUSB 전력 관리 및 이벤트 처리 규칙

> **규칙 목적**: ESP-IDF의 자동 저전력 모드(Light-sleep)와 TinyUSB를 안정적으로 통합하고, USB 연결 상태 및 이벤트를 효과적으로 관리하는 표준 패턴을 정의합니다.

---

## 1. 저전력 모드(Light-sleep) 통합

FreeRTOS의 Tickless Idle 기능과 ESP-IDF의 전력 관리 컴포넌트를 사용하면, 시스템이 유휴 상태일 때 자동으로 Light-sleep 모드로 전환하여 전력 소모를 최적화할 수 있습니다.

### 1.1. `sdkconfig` 필수 설정

`idf.py menuconfig`를 통해 다음 설정을 활성화해야 합니다.

```ini
# --- FreeRTOS 저전력 설정 ---
# Tickless Idle 활성화
CONFIG_FREERTOS_USE_TICKLESS_IDLE=y

# --- 전력 관리 설정 ---
# 전력 관리 활성화
CONFIG_PM_ENABLE=y
# Light-sleep을 기본 절전 모드로 사용
CONFIG_PM_SLP_DEFAULT_LOCK_LIGHT_SLEEP=y
```

### 1.2. 안전한 저전력 진입을 위한 API

처리해야 할 USB 이벤트가 남아있는 상태에서 시스템이 절전 모드로 진입하면 통신 오류가 발생할 수 있습니다. 이를 방지하기 위해 TinyUSB는 이벤트 큐의 상태를 확인할 수 있는 API를 제공합니다.

- **`tud_task_event_ready()`**: OSAL(운영체제 추상화 계층) 이벤트 큐에 처리할 이벤트가 있는지 확인합니다. `true`를 반환하면 `tud_task()`를 즉시 호출해야 함을 의미합니다.
- **`osal_queue_empty()`**: `tud_task_event_ready()`의 내부 구현과 유사하게 OSAL 큐가 비어있는지 직접 확인할 수 있습니다.

ESP-IDF의 자동 전력 관리 기능은 절전 모드 진입 전 `esp_sleep_start()` 내부에서 필요한 검사를 수행하지만, 애플리케이션 레벨에서 명시적으로 `usb_task`의 동작을 최적화하여 안정성을 높일 수 있습니다.

```c
// usb_task의 개선된 루프 (저전력 고려)
// from: tinyusb-freertos-integration.mdc

void usb_task(void* param) {
    (void)param;
    while (1) {
        // tud_task()는 항상 루프의 시작에서 호출
        tud_task();

        // 처리할 이벤트가 없을 경우, CPU를 다른 태스크에 양보하거나
        // Tickless Idle이 절전 모드로 진입할 수 있도록 vTaskDelay를 호출
        if (!tud_task_event_ready()) {
            vTaskDelay(pdMS_TO_TICKS(1));
        }
    }
}
```

**Context7 정보 (Trust Score 9.7)**: `tud_task_event_ready()`는 RTOS 환경에서만 사용 가능하며(`CFG_TUSB_OS` != `OPT_OS_NONE`), ESP-IDF의 자동 Light-sleep과 함께 사용할 때 시스템이 잠들기 전에 USB 이벤트를 모두 처리했는지 보장하여 데이터 손실이나 통신 오류를 방지하는 핵심적인 역할을 합니다.

---

## 2. USB 연결 상태 관리

TinyUSB는 디바이스의 연결 및 열거 상태를 확인할 수 있는 API를 제공합니다.

### 2.1. `tud_mounted()`

**역할**: USB 디바이스가 호스트에 연결되고, 버스 리셋 및 열거(Enumeration) 과정을 성공적으로 마쳤는지 확인합니다. HID 리포트나 CDC 데이터를 전송하기 전에 이 함수를 호출하여 `true`를 반환하는지 확인하는 것이 안전합니다.

```c
// hid_handler.c
bool send_keyboard_report(hid_keyboard_report_t* report) {
    // USB가 열거되었는지 먼저 확인
    if (!tud_mounted()) {
        ESP_LOGW(TAG, "USB not mounted, cannot send report");
        return false;
    }

    if (!tud_hid_n_ready(ITF_NUM_HID_KEYBOARD)) {
        // ...
    }
    // ...
}
```

### 2.2. `tud_connected()`

**역할**: USB가 물리적으로 연결되고 버스 리셋 후 첫 번째 SETUP 패킷을 수신했는지 확인합니다. `tud_mounted()`보다 더 이른 시점에 `true`가 되지만, 아직 열거가 완료되지 않은 상태일 수 있습니다. 주로 디바이스의 초기 연결 상태를 감지하는 데 사용됩니다.

```c
// main.c 또는 상태 모니터링 태스크

void check_usb_connection_task(void* param) {
    while(1) {
        if (tud_connected()) {
            // USB 케이블이 연결되었고, 최소한의 통신이 시작됨
        } else {
            // USB 케이블이 분리됨
        }
        vTaskDelay(pdMS_TO_TICKS(500));
    }
}
```

---

## 3. 전역 이벤트 후크 `tud_event_hook_cb()`

**역할**: TinyUSB 스택 내부에서 발생하는 주요 이벤트를 애플리케이션에 알리는 약한 심볼(weak symbol) 콜백 함수입니다. 애플리케이션에서 이 함수를 직접 구현하여 USB 이벤트를 중앙에서 처리할 수 있습니다.

**이벤트 종류 (`TUSB_EVENT_*`)**:
- `TUSB_EVENT_BUS_RESET`: 버스 리셋 발생
- `TUSB_EVENT_UNPLUGGED`: USB 연결 해제
- `TUSB_EVENT_SUSPEND`: 서스펜드(절전) 모드 진입
- `TUSB_EVENT_RESUME`: 리줌(절전 해제) 신호 감지

```c
// main.c 또는 별도의 이벤트 핸들러 파일

#include "tusb.h"

void tud_event_hook_cb(uint8_t rhport, tusb_event_t event, bool in_isr) {
    (void)rhport;
    (void)in_isr;

    switch(event) {
        case TUSB_EVENT_UNPLUGGED:
            ESP_LOGW("USB_EVENT", "Device unplugged");
            // 연결 끊김 상태 처리 (예: LED 상태 변경)
            break;

        case TUSB_EVENT_SUSPEND:
            ESP_LOGI("USB_EVENT", "Bus suspended");
            // 서스펜드 상태 처리
            break;

        case TUSB_EVENT_RESUME:
            ESP_LOGI("USB_EVENT", "Bus resumed");
            break;
        
        default:
            break;
    }
}
```

**설계 원칙**:
- **중앙 집중 관리**: 여러 클래스 드라이버에 걸친 공통적인 USB 상태(연결, 해제, 절전)를 이 콜백에서 일관되게 처리할 수 있습니다.
- **약한 심볼**: 구현하지 않아도 빌드 오류가 발생하지 않습니다. 필요할 때만 애플리케이션 코드에 추가하여 사용합니다.
- **Context7 정보 (Trust Score 9.7)**: `tud_event_hook_cb()`는 디버깅이나 USB 연결 상태에 따른 애플리케이션 동작을 제어하는 데 매우 유용합니다. 예를 들어 `TUSB_EVENT_SUSPEND` 이벤트 수신 시 주변 장치의 전원을 차단하여 전력 소모를 더욱 최적화할 수 있습니다.